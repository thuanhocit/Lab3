//============================Bài 1========================================
import React from 'react';
import { View } from 'react-native';
import MoveBox from './Bai1';

const App = () => (
  <View style={{ flex: 1 }}>
    <MoveBox />
  </View>
);

export default App;



//============================Bài 2========================================
import React, { useState, useRef } from 'react';
import { 
  StyleSheet, 
  View, 
  FlatList, 
  Text, 
  SafeAreaView, 
  StatusBar,
  Dimensions
} from 'react-native';
import ListItem from './Bai2/ListItem'; // Assuming ListItem is a separate component

const { width } = Dimensions.get('window');

// Generate dummy data
const generateData = (count) => {
  return Array(count).fill(0).map((_, index) => ({
    id: `item-${index}`,
    title: `Item ${index + 1}`,
  }));
};

export default function App() {
  const [data] = useState(generateData(20));
  const [viewableItems, setViewableItems] = useState([]);
  
  const onViewableItemsChanged = useRef(({ viewableItems: vItems }) => {
    setViewableItems(vItems);
  }).current;

  const viewabilityConfig = useRef({
    itemVisiblePercentThreshold: 50
  }).current;

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor="#fff" />
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Animated List</Text>
      </View>
      <FlatList
        data={data}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <ListItem item={item} viewableItems={viewableItems} />
        )}
        onViewableItemsChanged={onViewableItemsChanged}
        viewabilityConfig={viewabilityConfig}
        contentContainerStyle={styles.listContent}
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  header: {
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  listContent: {
    padding: 16,
  },
});



//=============================Bài 3===================================
import React, { useRef, useState } from 'react';
import { View, StatusBar, Animated, StyleSheet } from 'react-native';
import Header from './Lab33/components/Header';
import QuizList from './Lab33/components/QuizList';
import { QUIZZES, TABS } from './Lab33/data/mockData';

const HEADER_MAX_HEIGHT = 200;
const HEADER_MIN_HEIGHT = 70;
const HEADER_SCROLL_DISTANCE = HEADER_MAX_HEIGHT - HEADER_MIN_HEIGHT;

export default function App() {
  const scrollY = useRef(new Animated.Value(0)).current;
  const [activeTab, setActiveTab] = useState(0);

  // Interpolate header height based on scroll position
  const headerHeight = scrollY.interpolate({
    inputRange: [0, HEADER_SCROLL_DISTANCE],
    outputRange: [HEADER_MAX_HEIGHT, HEADER_MIN_HEIGHT],
    extrapolate: 'clamp',
  });

  // Interpolate avatar opacity and scale
  const avatarOpacity = scrollY.interpolate({
    inputRange: [0, HEADER_SCROLL_DISTANCE / 2, HEADER_SCROLL_DISTANCE],
    outputRange: [1, 0.5, 0],
    extrapolate: 'clamp',
  });

  const avatarScale = scrollY.interpolate({
    inputRange: [0, HEADER_SCROLL_DISTANCE / 2, HEADER_SCROLL_DISTANCE],
    outputRange: [1, 0.8, 0.5],
    extrapolate: 'clamp',
  });

  // Interpolate greeting text opacity and position
  const greetingOpacity = scrollY.interpolate({
    inputRange: [0, HEADER_SCROLL_DISTANCE / 2, HEADER_SCROLL_DISTANCE],
    outputRange: [1, 0.5, 0],
    extrapolate: 'clamp',
  });

  const greetingTranslateY = scrollY.interpolate({
    inputRange: [0, HEADER_SCROLL_DISTANCE],
    outputRange: [0, -20],
    extrapolate: 'clamp',
  });

  // Interpolate tabs position
  const tabsTranslateY = scrollY.interpolate({
    inputRange: [0, HEADER_SCROLL_DISTANCE],
    outputRange: [0, -HEADER_SCROLL_DISTANCE + 30],
    extrapolate: 'clamp',
  });

  return (
    <View style={styles.container}>
      <StatusBar barStyle="light-content" />
      
      <Header 
        headerHeight={headerHeight}
        avatarOpacity={avatarOpacity}
        avatarScale={avatarScale}
        greetingOpacity={greetingOpacity}
        greetingTranslateY={greetingTranslateY}
        tabsTranslateY={tabsTranslateY}
        tabs={TABS}
        activeTab={activeTab}
        setActiveTab={setActiveTab}
      />
      
      <QuizList 
        quizzes={QUIZZES}
        scrollY={scrollY}
        headerMaxHeight={HEADER_MAX_HEIGHT}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
});